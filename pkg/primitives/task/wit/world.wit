package faaas:task;

interface types {
    resource task-context {
        clone: func() -> task-context;
        set: func(key: string, value: u32);
        get: func(key: string) -> u32;
        set-status: func(status: task-status);
        get-status: func() -> task-status;
    }

    enum task-status {
        unknown,
        success,
        error,
    }

    resource task-error {}
}

interface callable {
    use types.{task-context, task-error};

    call: func(ctx: task-context) -> result<task-context, task-error>;
}

world task {
    export callable;
}
