@inproceedings{agacheFirecrackerLightweightVirtualization2020,
  title = {Firecracker: {{Lightweight Virtualization}} for {{Serverless Applications}}},
  booktitle = {17th {{USENIX Symposium}} on {{Networked Systems Design}} and {{Implementation}} ({{NSDI}} 20)},
  author = {Agache, Alexandru and Brooker, Marc and Iordache, Alexandra and Liguori, Anthony and Neugebauer, Rolf and Piwonka, Phil and Popa, Diana-Maria},
  date = {2020-02},
  pages = {419--434},
  publisher = {USENIX Association},
  location = {Santa Clara, CA},
  url = {https://www.usenix.org/conference/nsdi20/presentation/agache},
  isbn = {978-1-939133-13-7}
}

@inproceedings{akkusSANDHighPerformanceServerless2018,
  title = {{{SAND}}: {{Towards High-Performance Serverless Computing}}},
  booktitle = {2018 {{USENIX Annual Technical Conference}} ({{USENIX ATC}} 18)},
  author = {Akkus, Istemi Ekin and Chen, Ruichuan and Rimac, Ivica and Stein, Manuel and Satzke, Klaus and Beck, Andre and Aditya, Paarijaat and Hilt, Volker},
  date = {2018-07},
  pages = {923--935},
  publisher = {USENIX Association},
  location = {Boston, MA},
  url = {https://www.usenix.org/conference/atc18/presentation/akkus},
  isbn = {978-1-939133-01-4}
}

@online{allianceCranelift2024,
  title = {Cranelift},
  author = {Alliance, Bytecode},
  date = {2024},
  url = {https://cranelift.dev/}
}

@online{allianceWasmtime2024,
  title = {Wasmtime},
  author = {Alliance, Bytecode},
  date = {2024},
  url = {https://wasmtime.dev/}
}

@online{amazonAWSLambda2024,
  title = {{{AWS Lambda}}},
  author = {{Amazon}},
  date = {2024},
  url = {https://aws.amazon.com/lambda/}
}

@online{amazonAWSStepFunctions2024,
  title = {{{AWS Step Functions}}},
  author = {{Amazon}},
  date = {2024},
  url = {https://aws.amazon.com/step-functions/}
}

@online{amazonFunctionsCallingFunctions2024,
  title = {Functions Calling Functions},
  author = {{Amazon}},
  date = {2024},
  url = {https://docs.aws.amazon.com/lambda/latest/operatorguide/functions-calling-functions.html}
}

@online{amazonScalingPrimeVideo2024,
  title = {Scaling up the {{Prime Video}} Audio/Video Monitoring Service and Reducing Costs by 90\%},
  author = {{Amazon}},
  date = {2024},
  url = {https://www.primevideotech.com/video-streaming/scaling-up-the-prime-video-audio-video-monitoring-service-and-reducing-costs-by-90}
}

@online{AmazonWebServices2014,
  title = {Amazon {{Web Services Announces AWS Lambda}}},
  date = {2014-11-13T18:30:00},
  url = {https://press.aboutamazon.com/2014/11/amazon-web-services-announces-aws-lambda},
  urldate = {2024-06-04},
  abstract = {New compute service runs developers’ code in response to events, and makes it even faster and easier for developers to build dynamic applications on the AWS Cloud},
  langid = {english},
  organization = {Press Center},
  file = {/Users/oli/Zotero/storage/QW3KUUDC/amazon-web-services-announces-aws-lambda.html}
}

@online{apacheOpenWhisk2024,
  title = {{{OpenWhisk}}},
  author = {{Apache}},
  date = {2024},
  url = {https://github.com/apache/openwhisk}
}

@online{AWSLambdaChanges,
  title = {{{AWS Lambda}} Changes Duration Billing Granularity from 100ms down to 1ms},
  url = {https://aws.amazon.com/about-aws/whats-new/2020/12/aws-lambda-changes-duration-billing-granularity-from-100ms-to-1ms/},
  urldate = {2024-06-05},
  langid = {american},
  organization = {Amazon Web Services, Inc.},
  file = {/Users/oli/Zotero/storage/98RTJ89Z/aws-lambda-changes-duration-billing-granularity-from-100ms-to-1ms.html}
}

@online{azureAnnouncingGeneralAvailability2016,
  title = {Announcing General Availability of {{Azure Functions}}},
  author = {Azure, Microsoft},
  date = {2016-11-15T00:00:00+00:00},
  url = {https://azure.microsoft.com/en-us/blog/announcing-general-availability-of-azure-functions/},
  urldate = {2024-06-04},
  abstract = {Today organizations are turning to the cloud not only to accelerate – but to transform – their business. Part of the Azure PaaS portfolio, Azure Functions, offers a serverless compute experience for rapid application development and operational agility.},
  langid = {american},
  organization = {Microsoft Azure Blog},
  file = {/Users/oli/Zotero/storage/LSTIFZZ7/announcing-general-availability-of-azure-functions.html}
}

@online{azureAzureFunctions2024,
  title = {Azure {{Functions}}},
  author = {{Azure}},
  date = {2024},
  url = {https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview}
}

@inproceedings{baldiniServerlessTrilemmaFunction2017,
  title = {The Serverless Trilemma: Function Composition for Serverless Computing},
  shorttitle = {The Serverless Trilemma},
  booktitle = {Proceedings of the 2017 {{ACM SIGPLAN International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}},
  author = {Baldini, Ioana and Cheng, Perry and Fink, Stephen J. and Mitchell, Nick and Muthusamy, Vinod and Rabbah, Rodric and Suter, Philippe and Tardieu, Olivier},
  date = {2017-10-25},
  pages = {89--103},
  publisher = {ACM},
  location = {Vancouver BC Canada},
  doi = {10.1145/3133850.3133855},
  url = {https://dl.acm.org/doi/10.1145/3133850.3133855},
  urldate = {2024-06-05},
  eventtitle = {{{SPLASH}} '17: {{Conference}} on {{Systems}}, {{Programming}}, {{Languages}}, and {{Applications}}: {{Software}} for {{Humanity}}},
  isbn = {978-1-4503-5530-8},
  langid = {english}
}

@article{barcelona-ponsStatefulServerlessComputing2022,
  title = {Stateful {{Serverless Computing}} with {{Crucial}}},
  author = {Barcelona-Pons, Daniel and Sutra, Pierre and Sánchez-Artigas, Marc and París, Gerard and García-López, Pedro},
  date = {2022-03},
  journaltitle = {ACM Trans. Softw. Eng. Methodol.},
  volume = {31},
  number = {3},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  issn = {1049-331X},
  doi = {10.1145/3490386},
  url = {https://doi.org/10.1145/3490386},
  abstract = {Serverless computing greatly simplifies the use of cloud resources. In particular, Function-as-a-Service (FaaS) platforms enable programmers to develop applications as individual functions that can run and scale independently. Unfortunately, applications that require fine-grained support for mutable state and synchronization, such as machine learning (ML) and scientific computing, are notoriously hard to build with this new paradigm. In this work, we aim at bridging this gap. We present Crucial, a system to program highly-parallel stateful serverless applications. Crucial retains the simplicity of serverless computing. It is built upon the key insight that FaaS resembles to concurrent programming at the scale of a datacenter. Accordingly, a distributed shared memory layer is the natural answer to the needs for fine-grained state management and synchronization. Crucial allows to port effortlessly a multi-threaded code base to serverless, where it can benefit from the scalability and pay-per-use model of FaaS platforms. We validate Crucial with the help of micro-benchmarks and by considering various stateful applications. Beyond classical parallel tasks (e.g., a Monte Carlo simulation), these applications include representative ML algorithms such as k-means and logistic regression. Our evaluation shows that Crucial obtains superior or comparable performance to Apache Spark at similar cost (18\%–40\% faster). We also use Crucial to port (part of) a state-of-the-art multi-threaded ML library to serverless. The ported application is up to 30\% faster than with a dedicated high-end server. Finally, we attest that Crucial can rival in performance with a single-machine, multi-threaded implementation of a complex coordination problem. Overall, Crucial delivers all these benefits with less than 6\% of changes in the code bases of the evaluated applications.},
  keywords = {FaaS,in-memory,Serverless,stateful,synchronization}
}

@online{bellardQuickJS2024,
  title = {{{QuickJS}}},
  author = {Bellard, Fabrice},
  date = {2024},
  url = {https://bellard.org/quickjs/}
}

@online{BenjaminBlackEC2,
  title = {Benjamin {{Black}} — {{EC2 Origins}}},
  url = {https://blog.b3k.us/2009/01/25/ec2-origins.html},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/75JKJXNQ/ec2-origins.html}
}

@inproceedings{bortoliniInvestigatingPerformanceCost2020,
  title = {Investigating {{Performance}} and {{Cost}} in {{Function-as-a-Service Platforms}}},
  booktitle = {Advances on {{P2P}}, {{Parallel}}, {{Grid}}, {{Cloud}} and {{Internet Computing}}},
  author = {Bortolini, Diogo and Obelheiro, Rafael R.},
  editor = {Barolli, Leonard and Hellinckx, Peter and Natwichai, Juggapong},
  date = {2020},
  pages = {174--185},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-33509-0_16},
  abstract = {The function-as-a-service (FaaS) service model has been gaining adoption at a fast pace. In this service model, cloud applications are structured as self-contained code modules called functions that are instantiated on-demand, and billing is based on the number of function invocations and on function execution time. Developers are attracted to FaaS because it promises to remove two drawbacks of the traditional IaaS and PaaS service models, the need to provision and manage infrastructure, and the need to pay for unused resources. In practice, however, things are a little less rosy: developers still have to choose the amount of memory allocated to functions, and costs are less predictable, especially because they are tied to function performance. This work investigates performance and cost variations within and across FaaS providers. Our results show that performance and cost can be significantly affected by the choice of memory allocation, FaaS provider, and programming language: we observed differences of up~to \$\$8.5\textbackslash times \$\$in performance and 67\$\$\textbackslash times \$\$in cost between providers (with the same language and memory size), and \$\$16.8\textbackslash times \$\$in performance and \$\$67.2\textbackslash times \$\$in cost between programming languages (with the same provider and memory).},
  isbn = {978-3-030-33509-0},
  langid = {english},
  file = {/Users/oli/Zotero/storage/44R9YTFG/Bortolini and Obelheiro - 2020 - Investigating Performance and Cost in Function-as-.pdf}
}

@article{burckhardtDurableFunctionsSemantics2021,
  title = {Durable Functions: Semantics for Stateful Serverless},
  author = {Burckhardt, Sebastian and Gillum, Chris and Justo, David and Kallas, Konstantinos and McMahon, Connor and Meiklejohn, Christopher S.},
  date = {2021-10},
  journaltitle = {Proc. ACM Program. Lang.},
  volume = {5},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3485510},
  url = {https://doi.org/10.1145/3485510},
  abstract = {Serverless, or Functions-as-a-Service (FaaS), is an increasingly popular paradigm for application development, as it provides implicit elastic scaling and load based billing. However, the weak execution guarantees and intrinsic compute-storage separation of FaaS create serious challenges when developing applications that require persistent state, reliable progress, or synchronization. This has motivated a new generation of serverless frameworks that provide stateful abstractions. For instance, Azure's Durable Functions (DF) programming model enhances FaaS with actors, workflows, and critical sections. As a programming model, DF is interesting because it combines task and actor parallelism, which makes it suitable for a wide range of serverless applications. We describe DF both informally, using examples, and formally, using an idealized high-level model based on the untyped lambda calculus. Next, we demystify how the DF runtime can (1) execute in a distributed unreliable serverless environment with compute-storage separation, yet still conform to the fault-free high-level model, and (2) persist execution progress without requiring checkpointing support by the language runtime. To this end we define two progressively more complex execution models, which contain the compute-storage separation and the record-replay, and prove that they are equivalent to the high-level model.},
  issue = {OOPSLA},
  keywords = {Durable Functions,Programming,Reliable,Serverless,Service Composition,Services,Workflows}
}

@article{burckhardtNetheriteEfficientExecution2022,
  title = {Netherite: Efficient Execution of Serverless Workflows},
  author = {Burckhardt, Sebastian and Chandramouli, Badrish and Gillum, Chris and Justo, David and Kallas, Konstantinos and McMahon, Connor and Meiklejohn, Christopher S. and Zhu, Xiangfeng},
  date = {2022-04},
  journaltitle = {Proc. VLDB Endow.},
  volume = {15},
  number = {8},
  pages = {1591--1604},
  publisher = {VLDB Endowment},
  issn = {2150-8097},
  doi = {10.14778/3529337.3529344},
  url = {https://doi.org/10.14778/3529337.3529344},
  abstract = {Serverless is a popular choice for cloud service architects because it can provide scalability and load-based billing with minimal developer effort. Functions-as-a-service (FaaS) are originally stateless, but emerging frameworks add stateful abstractions. For instance, the widely used Durable Functions (DF) allow developers to write advanced serverless applications, including reliable workflows and actors, in a programming language of choice. DF implicitly and continuosly persists the state and progress of applications, which greatly simplifies development, but can create an IOps bottleneck.To improve efficiency, we introduce Netherite, a novel architecture for executing serverless workflows on an elastic cluster. Netherite groups the numerous application objects into a smaller number of partitions, and pipelines the state persistence of each partition. This improves latency and throughput, as it enables workflow steps to group commit, even if causally dependent. Moreover, Netherite leverages FASTER's hybrid log approach to support larger-than-memory application state, and to enable efficient partition movement between compute hosts.Our evaluation shows that (a) Netherite achieves lower latency and higher throughput than the original DF engine, by more than an order of magnitude in some cases, and (b) that Netherite has lower latency than some commonly used alternatives, like AWS Step Functions or cloud storage triggers.}
}

@software{BytecodeallianceLucet2024,
  title = {Bytecodealliance/Lucet},
  date = {2024-05-30T21:34:22Z},
  origdate = {2018-12-07T21:27:18Z},
  url = {https://github.com/bytecodealliance/lucet},
  urldate = {2024-06-04},
  abstract = {Lucet, the Sandboxing WebAssembly Compiler.},
  organization = {Bytecode Alliance},
  keywords = {assemblyscript,rust,wasi,wasm,webassembly}
}

@inproceedings{caoPolarDBServerlessCloud2021,
  title = {{{PolarDB Serverless}}: {{A Cloud Native Database}} for {{Disaggregated Data Centers}}},
  booktitle = {Proceedings of the 2021 {{International Conference}} on {{Management}} of {{Data}}},
  author = {Cao, Wei and Zhang, Yingqiang and Yang, Xinjun and Li, Feifei and Wang, Sheng and Hu, Qingda and Cheng, Xuntao and Chen, Zongzhi and Liu, Zhenjun and Fang, Jing and Wang, Bo and Wang, Yuhui and Sun, Haiqing and Yang, Ze and Cheng, Zhushi and Chen, Sen and Wu, Jian and Hu, Wei and Zhao, Jianwei and Gao, Yusong and Cai, Songlu and Zhang, Yunyang and Tong, Jiawang},
  date = {2021},
  series = {{{SIGMOD}} '21},
  pages = {2477--2489},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3448016.3457560},
  url = {https://doi.org/10.1145/3448016.3457560},
  abstract = {beginabstract The trend in the DBMS market is to migrate to the cloud for elasticity, high availability, and lower costs. The traditional, monolithic database architecture is difficult to meet these requirements. With the development of high-speed network and new memory technologies, disaggregated data center has become a reality: it decouples various components from monolithic servers into separated resource pools (e.g., compute, memory, and storage) and connects them through a high-speed network. The next generation cloud native databases should be designed for disaggregated data centers. In this paper, we describe the novel architecture of name, which follows thedisaggregation design paradigm: the CPU resource on compute nodes is decoupled from remote memory pool and storage pool. Each resource pool grows or shrinks independently, providing revon-demand provisoning at multiple dimensions while improving reliability. We also design our system to mitigate the inherent penalty brought by resource disaggregation, and introduce optimizations such as optimistic locking and index awared prefetching. Compared to the architecture that uses local resources, name achieves better dynamic resource provisioning capabilities and 5.3 times faster failure recovery speed, while achieving comparable performance. endabstract},
  isbn = {978-1-4503-8343-1},
  venue = {Virtual Event, China},
  keywords = {cloud database,disaggregated data center,shared remote memory,shared storage}
}

@online{CgroupsLinuxManual,
  title = {Cgroups(7) - {{Linux}} Manual Page},
  url = {https://www.man7.org/linux/man-pages/man7/cgroups.7.html},
  urldate = {2024-06-06},
  file = {/Users/oli/Zotero/storage/4MTG5ENA/cgroups.7.html}
}

@article{chardServerlessSupercomputingHigh2019,
  title = {Serverless {{Supercomputing}}: {{High Performance Function}} as a {{Service}} for {{Science}}},
  author = {Chard, Ryan and Skluzacek, Tyler J. and Li, Zhuozhao and Babuji, Yadu N. and Woodard, Anna and Blaiszik, Ben and Tuecke, Steven and Foster, Ian T. and Chard, Kyle},
  date = {2019},
  journaltitle = {CoRR},
  volume = {abs/1908.04907},
  eprint = {1908.04907},
  eprinttype = {arxiv},
  url = {http://arxiv.org/abs/1908.04907}
}

@online{CloudComputingContainers2018,
  title = {Cloud {{Computing}} without {{Containers}}},
  date = {2018-11-09T14:57:05.000+00:00},
  url = {https://blog.cloudflare.com/cloud-computing-without-containers},
  urldate = {2024-06-04},
  abstract = {We have a cloud computing platform called Workers. Unlike essentially every other cloud computing platform I know of, it doesn’t use containers or virtual machines. We believe that is the future of Serverless and cloud computing in general, and I’ll try to convince you why.},
  langid = {english},
  organization = {The Cloudflare Blog},
  file = {/Users/oli/Zotero/storage/MQG34T4K/cloud-computing-without-containers.html}
}

@online{CloudhypervisorCloudhypervisorVirtual,
  title = {Cloud-Hypervisor/Cloud-Hypervisor: {{A Virtual Machine Monitor}} for Modern {{Cloud}} Workloads. {{Features}} Include {{CPU}}, Memory and Device Hotplug, Support for Running {{Windows}} and {{Linux}} Guests, Device Offload with Vhost-User and a Minimal Compact Footprint. {{Written}} in {{Rust}} with a Strong Focus on Security.},
  url = {https://github.com/cloud-hypervisor/cloud-hypervisor},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/W2AC6E2M/cloud-hypervisor.html}
}

@online{ContainerSecurityFundamentals,
  title = {Container Security Fundamentals Part 4: {{Cgroups}} | {{Datadog Security Labs}}},
  shorttitle = {Container Security Fundamentals Part 4},
  url = {https://securitylabs.datadoghq.com/articles/container-security-fundamentals-part-4/},
  urldate = {2024-06-06},
  abstract = {A look at how cgroups are used in Linux and container systems},
  langid = {english},
  file = {/Users/oli/Zotero/storage/T92V2EMA/container-security-fundamentals-part-4.html}
}

@inproceedings{copikSeBSServerlessBenchmark2021,
  title = {{{SeBS}}: {{A Serverless Benchmark Suite}} for {{Function-as-a-Service Computing}}},
  booktitle = {Proceedings of the 22nd {{International Middleware Conference}}},
  author = {Copik, Marcin and Kwasniewski, Grzegorz and Besta, Maciej and Podstawski, Michal and Hoefler, Torsten},
  date = {2021},
  series = {Middleware '21},
  pages = {64--78},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3464298.3476133},
  url = {https://doi.org/10.1145/3464298.3476133},
  isbn = {978-1-4503-8534-3},
  venue = {Québec city, Canada},
  keywords = {benchmark,FaaS,function-as-a-service,serverless}
}

@online{CVECVE202014386,
  title = {{{CVE}} - {{CVE-2020-14386}}},
  url = {https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-14386},
  urldate = {2024-06-06},
  file = {/Users/oli/Zotero/storage/49KUX9IA/cvename.html}
}

@inproceedings{dawXanaduMitigatingCascading2020,
  title = {Xanadu: {{Mitigating}} Cascading Cold Starts in Serverless Function Chain Deployments},
  booktitle = {Proceedings of the 21st {{International Middleware Conference}}},
  author = {Daw, Nilanjan and Bellur, Umesh and Kulkarni, Purushottam},
  date = {2020},
  series = {Middleware '20},
  pages = {356--370},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3423211.3425690},
  url = {https://doi.org/10.1145/3423211.3425690},
  abstract = {Organization of tasks as workflows are an essential feature to expand the applicability of the serverless computing framework. Existing serverless platforms are either agnostic to function chains (workflows as a composition of functions) or rely on naive provisioning and management mechanisms of the serverless framework—an example is that they provision resources after the trigger to each function in a workflow arrives thereby forcing a setup latency for each function in the workflow. In this work, we focus on mitigating the cascading cold start problem— the latency overheads in triggering a sequence of serverless functions according to a workflow specification. We first establish the nature and extent of the cascading effects in cold start situations across multiple commercial server platforms and cloud providers. Towards mitigating these cascading overheads, we design and develop several optimizations, that are built into our tool Xanadu. Xanadu offers multiple instantiation options based on the desired runtime isolation requirements and supports function chaining with or without explicit workflow specifications. Xanadu's optimizations to address the cascading cold start problem are built on speculative and just-in-time provisioning of resources. Our evaluation of the Xanadu system reveals almost complete elimination of cascading cold starts at minimal cost overheads, outperforming the available state of the art platforms. For even relatively short workflows, Xanadu reduces platform overheads by almost 18x compared to Knative and 10x compared to Apache Openwhisk.},
  isbn = {978-1-4503-8153-6},
  venue = {Delft, Netherlands},
  keywords = {Just-in-time scheduling,Serverless workflows,Speculative deployment}
}

@online{DemystifyingContainerVs,
  title = {Demystifying Container vs {{VM-based}} Security: {{Security}} in Plaintext},
  shorttitle = {Demystifying Container vs {{VM-based}} Security},
  url = {https://cloud.google.com/blog/products/gcp/demystifying-container-vs-vm-based-security-security-in-plaintext},
  urldate = {2024-06-04},
  langid = {english},
  organization = {Google Cloud Blog},
  file = {/Users/oli/Zotero/storage/DG3SLZF5/demystifying-container-vs-vm-based-security-security-in-plaintext.html}
}

@article{desaiHypervisorSurveyConcepts2013,
  title = {Hypervisor: {{A Survey}} on {{Concepts}} and {{Taxonomy}}},
  author = {Desai, Ankita and Oza, Rachana and Sharma, Pratik and Patel, Bhautik},
  date = {2013},
  volume = {2},
  number = {3},
  abstract = {Because of the advancement of VLSI technology and aggregate throughput of all devices of servers, we are having tremendous computing power which could not be utilized either 100\% or optimized way. Virtualization technique has solved this problem by providing proper utilization of hardware resources. Virtualization refers to the abstraction of computer resources. It separates user and applications from the specific hardware characteristics they use to perform their task and thus creates virtual environment. The purpose of creating virtual environment is to improve resource utilization by aggregating heterogeneous and autonomous resources. This can be provided by adding a layer called HYPERVISOR between OS and underlying hardware. There are many market players who have launched the hypervisor. This paper mentions architectural specification of each hypervisor followed by common characteristics that each hypervisor poses.},
  langid = {english},
  file = {/Users/oli/Zotero/storage/3BA6NET6/Desai et al. - 2013 - Hypervisor A Survey on Concepts and Taxonomy.pdf}
}

@online{DesignOverviewLibuv,
  title = {Design Overview - Libuv Documentation},
  url = {https://docs.libuv.org/en/v1.x/design.html},
  urldate = {2024-06-06}
}

@online{DockerAcceleratedContainer2022,
  title = {Docker: {{Accelerated Container Application Development}}},
  shorttitle = {Docker},
  date = {2022-05-10T08:10:33-07:00},
  url = {https://www.docker.com/},
  urldate = {2024-06-06},
  abstract = {Docker is a platform designed to help developers build, share, and run container applications. We handle the tedious setup, so you can focus on the code.},
  langid = {american},
  file = {/Users/oli/Zotero/storage/7BMHT3AJ/www.docker.com.html}
}

@inproceedings{duCatalyzerSubmillisecondStartup2020,
  title = {Catalyzer: {{Sub-millisecond Startup}} for {{Serverless Computing}} with {{Initialization-less Booting}}},
  booktitle = {Proceedings of the {{Twenty-Fifth International Conference}} on {{Architectural Support}} for {{Programming Languages}} and {{Operating Systems}}},
  author = {Du, Dong and Yu, Tianyi and Xia, Yubin and Zang, Binyu and Yan, Guanglu and Qin, Chenggang and Wu, Qixuan and Chen, Haibo},
  date = {2020},
  series = {{{ASPLOS}} '20},
  pages = {467--481},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3373376.3378512},
  url = {https://doi.org/10.1145/3373376.3378512},
  abstract = {Serverless computing promises cost-efficiency and elasticity for high-productive software development. To achieve this, the serverless sandbox system must address two challenges: strong isolation between function instances, and low startup latency to ensure user experience. While strong isolation can be provided by virtualization-based sandboxes, the initialization of sandbox and application causes non-negligible startup overhead. Conventional sandbox systems fall short in low-latency startup due to their application-agnostic nature: they can only reduce the latency of sandbox initialization through hypervisor and guest kernel customization, which is inadequate and does not mitigate the majority of startup overhead.This paper proposes Catalyzer, a serverless sandbox system design providing both strong isolation and extremely fast function startup. Instead of booting from scratch, Catalyzer restores a virtualization-based function instance from a well-formed checkpoint image and thereby skips the initialization on the critical path (init-less). Catalyzer boosts the restore performance by on-demand recovering both user-level memory state and system state. We also propose a new OS primitive, sfork (sandbox fork), to further reduce the startup latency by directly reusing the state of a running sandbox instance. Fundamentally, Catalyzer removes the initialization cost by reusing state, which enables general optimizations for diverse serverless functions. The evaluation shows that Catalyzer reduces startup latency by orders of magnitude, achieves {$<$} 1ms latency in the best case, and significantly reduces the end-to-end latency for real-world workloads. Catalyzer has been adopted by Ant Financial, and we also present lessons learned from industrial development.},
  isbn = {978-1-4503-7102-5},
  venue = {Lausanne, Switzerland},
  keywords = {checkpoint and restore,operating system,serverless computing,startup latency}
}

@online{EdgeCloudPlatform,
  title = {Edge {{Cloud Platform}}},
  url = {https://www.fastly.com/edge-cloud-network/serverless},
  urldate = {2024-06-04},
  abstract = {Fastly’s edge cloud platform helps the world’s most popular digital businesses keep pace with their customer expectations by delivering fast, secure, and scalable online experiences.},
  langid = {american},
  file = {/Users/oli/Zotero/storage/QZLDA57J/serverless.html}
}

@online{EdgeRuntime,
  title = {Edge {{Runtime}}},
  url = {https://vercel.com/docs/functions/runtimes/edge-runtime},
  urldate = {2024-06-04},
  abstract = {Learn about the Edge runtime, the environment in which Edge Functions run.},
  langid = {english},
  file = {/Users/oli/Zotero/storage/B73C7LYX/edge-runtime.html}
}

@article{eismannReviewServerlessUse2020,
  title = {A {{Review}} of {{Serverless Use Cases}} and Their {{Characteristics}}},
  author = {Eismann, Simon and Scheuner, Joel and Eyk, Erwin Van and Schwinger, Maximilian and Grohmann, Johannes and Herbst, Nikolas and Abad, Cristina L. and Iosup, Alexandru},
  date = {2020},
  journaltitle = {CoRR},
  volume = {abs/2008.11110},
  eprint = {2008.11110},
  eprinttype = {arxiv},
  url = {https://arxiv.org/abs/2008.11110}
}

@online{ellisOpenFaaS2024,
  title = {{{OpenFaaS}}},
  author = {Ellis, Alex},
  date = {2024},
  url = {https://github.com/openfaas/faas}
}

@inproceedings{espePerformanceEvaluationContainer2020,
  title = {Performance {{Evaluation}} of {{Container Runtimes}}:},
  shorttitle = {Performance {{Evaluation}} of {{Container Runtimes}}},
  booktitle = {Proceedings of the 10th {{International Conference}} on {{Cloud Computing}} and {{Services Science}}},
  author = {Espe, Lennart and Jindal, Anshul and Podolskiy, Vladimir and Gerndt, Michael},
  date = {2020},
  pages = {273--281},
  publisher = {{SCITEPRESS - Science and Technology Publications}},
  location = {Prague, Czech Republic},
  doi = {10.5220/0009340402730281},
  url = {http://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0009340402730281},
  urldate = {2024-06-06},
  eventtitle = {10th {{International Conference}} on {{Cloud Computing}} and {{Services Science}}},
  isbn = {978-989-758-424-4},
  langid = {english},
  file = {/Users/oli/Zotero/storage/N2PP2BFU/Espe et al. - 2020 - Performance Evaluation of Container Runtimes.pdf}
}

@online{EventarcOverview,
  title = {Eventarc Overview},
  url = {https://cloud.google.com/eventarc/docs/overview},
  urldate = {2024-06-04},
  langid = {english},
  organization = {Google Cloud},
  file = {/Users/oli/Zotero/storage/VRTV2C67/overview.html}
}

@online{EventListenerAmazon,
  title = {Event {{Listener}} - {{Amazon EventBridge}} - {{AWS}}},
  url = {https://aws.amazon.com/eventbridge/},
  urldate = {2024-06-04},
  abstract = {Amazon EventBridge is a serverless event bus that ingests data from your own apps, SaaS apps, and AWS services and routes that data to targets.},
  langid = {american},
  organization = {Amazon Web Services, Inc.},
  file = {/Users/oli/Zotero/storage/HAQ4LRL3/eventbridge.html}
}

@online{foundationNodeJS2024,
  title = {{{NodeJS}}},
  author = {Foundation, OpenJS},
  date = {2024},
  url = {https://nodejs.org/}
}

@online{foundationNodeJsEvent2024,
  title = {The {{Node}}.Js {{Event Loop}}, {{Timers}}, and Process.{{nextTick}}()},
  author = {Foundation, OpenJS},
  date = {2024},
  url = {https://nodejs.org/en/guides/event-loop-timers-and-nexttick}
}

@inproceedings{gadepalliChallengesOpportunitiesEfficient2019,
  title = {Challenges and {{Opportunities}} for {{Efficient Serverless Computing}} at the {{Edge}}},
  booktitle = {2019 38th {{Symposium}} on {{Reliable Distributed Systems}} ({{SRDS}})},
  author = {Gadepalli, Phani Kishore and Peach, Gregor and Cherkasova, Ludmila and Aitken, Rob and Parmer, Gabriel},
  date = {2019},
  pages = {261--2615},
  doi = {10.1109/SRDS47363.2019.00036}
}

@inproceedings{gadepalliSledgeServerlessfirstLightweight2020,
  title = {Sledge: A {{Serverless-first}}, {{Light-weight Wasm Runtime}} for the {{Edge}}},
  booktitle = {Proceedings of the 21st {{International Middleware Conference}}},
  author = {Gadepalli, Phani Kishore and McBride, Sean and Peach, Gregor and Cherkasova, Ludmila and Parmer, Gabriel},
  date = {2020},
  series = {Middleware '20},
  pages = {265--279},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3423211.3425680},
  url = {https://doi.org/10.1145/3423211.3425680},
  abstract = {Emerging IoT applications with real-time latency constraints require new data processing systems operating at the Edge. Serverless computing offers a new compelling paradigm, where a user can execute a small application without handling the operational issues of server provisioning and resource management. Despite a variety of existing commercial and open source serverless platforms (utilizing VMs and containers), these solutions are too heavy-weight for a resource-constrained Edge systems (due to large memory footprint and high invocation time). Moreover, serverless workloads that focus on per-client, short-running computations are not an ideal fit for existing general purpose computing systems.In this paper, we present the design and implementation of Sledge – a novel and efficient WebAssembly-based serverless framework for the Edge. Sledge is optimized for supporting unique properties of serverless workloads: the need for high density multi-tenancy, low startup time, bursty client request rates, and short-lived computations. Sledge is designed for these constraints by offering (i) optimized scheduling policies and efficient work-distribution for short-lived computations, and (ii) a light-weight function isolation model implemented using our own WebAssembly-based software fault isolation infrastructure. These lightweight sandboxes are designed to support high-density computation: with fast startup and teardown times to handle high client request rates. An extensive evaluation of Sledge with varying workloads and real-world serverless applications demonstrates the effectiveness of the designed serverless-first runtime for the Edge. Sledge supports up to 4 times higher throughput and 4 times lower latencies compared to Nuclio, one of the fastest open-source serverless frameworks.},
  isbn = {978-1-4503-8153-6},
  venue = {Delft, Netherlands},
  keywords = {Edge computing,IoT,serverless,WebAssembly}
}

@inproceedings{garcialopezComparisonFaaSOrchestration2018,
  title = {Comparison of {{FaaS Orchestration Systems}}},
  booktitle = {2018 {{IEEE}}/{{ACM International Conference}} on {{Utility}} and {{Cloud Computing Companion}} ({{UCC Companion}})},
  author = {García López, Pedro and Sánchez-Artigas, Marc and París, Gerard and Barcelona Pons, Daniel and Ruiz Ollobarren, Álvaro and Arroyo Pinto, David},
  date = {2018},
  pages = {148--153},
  doi = {10.1109/UCC-Companion.2018.00049},
  keywords = {Amazon Step Functions,Azure Durable Functions,Cloud computing,Computer architecture,DSL,FAA,Function Composition,IBM Composer,Measurement,Orchestration,Packaging,Programming,Serverless,Software}
}

@online{ggailey777AzureFunctionsBest2022,
  title = {Azure {{Functions}} Best Practices},
  author = {{ggailey777}},
  date = {2022-07-12},
  url = {https://learn.microsoft.com/en-us/azure/azure-functions/functions-best-practices},
  urldate = {2024-06-05},
  abstract = {Learn best practices for designing, deploying, and maintaining efficient function code running in Azure.},
  langid = {american},
  file = {/Users/oli/Zotero/storage/NKDJLMDZ/functions-best-practices.html}
}

@inproceedings{ghoshCachingTechniquesImprove2020,
  title = {Caching {{Techniques}} to {{Improve Latency}} in {{Serverless Architectures}}},
  booktitle = {2020 {{International Conference}} on {{COMmunication Systems}} \& {{NETworkS}} ({{COMSNETS}})},
  author = {Ghosh, Bishakh Chandra and Addya, Sourav Kanti and Somy, Nishant Baranwal and Nath, Shubha Brata and Chakraborty, Sandip and Ghosh, Soumya K},
  date = {2020},
  pages = {666--669},
  doi = {10.1109/COMSNETS48256.2020.9027427}
}

@incollection{goniwadaCloudNativeArchitecture2022,
  title = {Cloud {{Native Architecture}} and {{Design Patterns}}},
  booktitle = {Cloud {{Native Architecture}} and {{Design}}: {{A Handbook}} for {{Modern Day Architecture}} and {{Design}} with {{Enterprise-Grade Examples}}},
  author = {Goniwada, Shivakumar R.},
  editor = {Goniwada, Shivakumar R.},
  date = {2022},
  pages = {127--187},
  publisher = {Apress},
  location = {Berkeley, CA},
  doi = {10.1007/978-1-4842-7226-8_4},
  url = {https://doi.org/10.1007/978-1-4842-7226-8_4},
  urldate = {2024-06-04},
  abstract = {The Pattern Language is an organized and coherent set of patterns, each of which describes a problem and the core of a solution that can be used in many ways within a specific field of expertise.},
  isbn = {978-1-4842-7226-8},
  langid = {english},
  file = {/Users/oli/Zotero/storage/NUKTQQ99/Goniwada - 2022 - Cloud Native Architecture and Design Patterns.pdf}
}

@online{googleGoogleCloudFunctions2024,
  title = {Google {{Cloud Functions}}},
  author = {{Google}},
  date = {2024},
  url = {https://cloud.google.com/functions}
}

@online{googleWhatV82024,
  title = {What Is {{V8}}?},
  author = {{Google}},
  date = {2024},
  url = {https://v8.dev/}
}

@online{gregorpeachAWsm2024,
  title = {{{aWsm}}},
  author = {family=Gregor Peach, given=et, prefix=al., useprefix=false},
  date = {2024},
  url = {https://github.com/gwsystems/aWsm}
}

@online{GVisor,
  title = {{{gVisor}}},
  url = {https://gvisor.dev/},
  urldate = {2024-06-04},
  langid = {english},
  file = {/Users/oli/Zotero/storage/UBAVLVH2/gvisor.dev.html}
}

@inproceedings{haasBringingWebSpeed2017,
  title = {Bringing the Web up to Speed with {{WebAssembly}}},
  booktitle = {Proceedings of the 38th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, Jf},
  date = {2017-06-14},
  pages = {185--200},
  publisher = {ACM},
  location = {Barcelona Spain},
  doi = {10.1145/3062341.3062363},
  url = {https://dl.acm.org/doi/10.1145/3062341.3062363},
  urldate = {2024-06-04},
  eventtitle = {{{PLDI}} '17: {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  isbn = {978-1-4503-4988-8},
  langid = {english}
}

@inproceedings{haoEmpiricalAnalysisVM2021,
  title = {An {{Empirical Analysis}} of {{VM Startup Times}} in {{Public IaaS Clouds}}},
  booktitle = {2021 {{IEEE}} 14th {{International Conference}} on {{Cloud Computing}} ({{CLOUD}})},
  author = {Hao, Jianwei and Jiang, Ting and Wang, Wei and Kim, In Kee},
  date = {2021-09},
  pages = {398--403},
  issn = {2159-6190},
  doi = {10.1109/CLOUD53861.2021.00053},
  url = {https://ieeexplore.ieee.org/abstract/document/9582255},
  urldate = {2024-06-06},
  abstract = {VM startup time is an essential factor in designing elastic cloud applications. VM autoscaling can reduce the under-/over-provisioning period of VMs with a precise estimation of VM startup time, and in turn, it can guarantee the application's SLOs with improved cost-efficiency. Unfortunately, VM startup time has been little studied, and previous measurement results did not consider various configurations of VMs. This work performs a thorough analysis of VM startup times in two IaaS clouds (AWS, GCP). Specifically, we collected 300,000 data points from each provider by applying diverse VM configurations. i.e., different VM types, image sizes, location, purchase models. With extensive analysis, we found several important factors that can change VM startup time significantly. Moreover, by comparing with a previous study, we confirm that AWS made significant improvements for reducing VM startup times and currently has much quicker VM startup times than in the past.},
  eventtitle = {2021 {{IEEE}} 14th {{International Conference}} on {{Cloud Computing}} ({{CLOUD}})},
  keywords = {Cloud computing,Cloud Computing,Conferences,Data models,Estimation,IaaS,Time measurement,VM Startup Time},
  file = {/Users/oli/Zotero/storage/EAXYPX5H/Hao et al. - 2021 - An Empirical Analysis of VM Startup Times in Publi.pdf;/Users/oli/Zotero/storage/4SJUGSZE/9582255.html}
}

@article{hellersteinServerlessComputingOne2018,
  title = {Serverless {{Computing}}: {{One Step Forward}}, {{Two Steps Back}}},
  author = {Hellerstein, Joseph M. and Faleiro, Jose M. and Gonzalez, Joseph E. and Schleier-Smith, Johann and Sreekanti, Vikram and Tumanov, Alexey and Wu, Chenggang},
  date = {2018},
  journaltitle = {CoRR},
  volume = {abs/1812.03651},
  eprint = {1812.03651},
  eprinttype = {arxiv},
  url = {http://arxiv.org/abs/1812.03651}
}

@inproceedings{hildenbrandVirtiomemParavirtualizedMemory2021,
  title = {Virtio-Mem: Paravirtualized Memory Hot(Un)Plug},
  shorttitle = {Virtio-Mem},
  booktitle = {Proceedings of the 17th {{ACM SIGPLAN}}/{{SIGOPS International Conference}} on {{Virtual Execution Environments}}},
  author = {Hildenbrand, David and Schulz, Martin},
  date = {2021-04-16},
  pages = {1--14},
  publisher = {ACM},
  location = {Virtual USA},
  doi = {10.1145/3453933.3454010},
  url = {https://dl.acm.org/doi/10.1145/3453933.3454010},
  urldate = {2024-06-06},
  eventtitle = {{{VEE}} '21: 17th {{ACM SIGPLAN}}/{{SIGOPS International Conference}} on {{Virtual Execution Environments}}},
  isbn = {978-1-4503-8394-3},
  langid = {english}
}

@inproceedings{hilleyCloudComputingTaxonomy2009,
  title = {Cloud {{Computing}}: {{A Taxonomy}} of {{Platform}} and {{Infrastructure-level Offerings}}},
  shorttitle = {Cloud {{Computing}}},
  author = {Hilley, David},
  date = {2009-04-01},
  url = {https://www.semanticscholar.org/paper/Cloud-Computing%3A-A-Taxonomy-of-Platform-and-Hilley/7d778ad2dd3b79164e1c2a09636cb9f024f4fd9b},
  urldate = {2024-06-04},
  abstract = {Semantic Scholar extracted view of "Cloud Computing: A Taxonomy of Platform and Infrastructure-level Offerings" by David Hilley}
}

@inproceedings{hoeferTaxonomyCloudComputing2010,
  title = {Taxonomy of Cloud Computing Services},
  booktitle = {2010 {{IEEE Globecom Workshops}}},
  author = {Hoefer, C. N. and Karagiannis, G.},
  date = {2010-12},
  pages = {1345--1350},
  issn = {2166-0077},
  doi = {10.1109/GLOCOMW.2010.5700157},
  url = {https://ieeexplore.ieee.org/abstract/document/5700157},
  urldate = {2024-06-04},
  abstract = {Cloud computing is a highly discussed topic, and many big players of the software industry are entering the development of cloud services. Several companies want to explore the possibilities and benefits of cloud computing, but with the amount of cloud computing services increasing quickly, the need for a taxonomy framework rises. This paper describes the available cloud computing services, and proposes a tree-structured taxonomy based on their characteristics, to easily classify cloud computing services making it easier to compare them.},
  eventtitle = {2010 {{IEEE Globecom Workshops}}},
  keywords = {Characteristics,cloud computing,Cloud computing,Google,Open source software,Security,Standards,taxonomy,Taxonomy},
  file = {/Users/oli/Zotero/storage/5EEIMYWL/Hoefer and Karagiannis - 2010 - Taxonomy of cloud computing services.pdf;/Users/oli/Zotero/storage/2YX37L4K/5700157.html}
}

@online{ibmIBMCloudFunctions2024,
  title = {{{IBM Cloud Functions}}},
  author = {{IBM}},
  date = {2024},
  url = {https://cloud.ibm.com/docs/openwhisk}
}

@online{ibmWhatFaaSFunctionasaService2024,
  title = {What Is {{FaaS}} ({{Function-as-a-Service}})? | {{IBM}}},
  author = {{IBM}},
  date = {2024},
  url = {https://www.ibm.com/topics/faas}
}

@online{incDeno2024,
  title = {Deno},
  author = {Inc, Deno Land},
  date = {2024},
  url = {https://deno.com/}
}

@software{IntelNemu2024,
  title = {Intel/Nemu},
  date = {2024-04-24T07:59:09Z},
  origdate = {2018-05-21T23:15:04Z},
  url = {https://github.com/intel/nemu},
  urldate = {2024-06-04},
  abstract = {ARCHIVED: Modern Hypervisor for the Cloud. See https://github.com/cloud-hypervisor/cloud-hypervisor instead},
  organization = {Intel Corporation},
  keywords = {hardware-acceleration,qemu,virtualization,vmm}
}

@online{IntroducingGoogleApp,
  title = {Introducing {{Google App Engine}} + Our New Blog},
  url = {https://cloudplatform.googleblog.com/2008/04/introducing-google-app-engine-our-new.html},
  urldate = {2024-06-04},
  abstract = {Posted by Paul McDonald, Product Manager   At tonight's Campfire One  we launched a preview release  of Google App Engine -- a developer too...},
  langid = {english},
  organization = {Google Cloud Platform Blog},
  file = {/Users/oli/Zotero/storage/MENSAJI8/introducing-google-app-engine-our-new.html}
}

@article{jainStudyFirecrackerMicroVM2020,
  title = {Study of {{Firecracker MicroVM}}},
  author = {Jain, Madhur},
  date = {2020},
  journaltitle = {CoRR},
  volume = {abs/2005.12821},
  eprint = {2005.12821},
  eprinttype = {arxiv},
  url = {https://arxiv.org/abs/2005.12821}
}

@inproceedings{jithinVirtualMachineIsolation2014,
  title = {Virtual {{Machine Isolation}}},
  booktitle = {Recent {{Trends}} in {{Computer Networks}} and {{Distributed Systems Security}}},
  author = {Jithin, R. and Chandran, Priya},
  editor = {Martínez Pérez, Gregorio and Thampi, Sabu M. and Ko, Ryan and Shu, Lei},
  date = {2014},
  pages = {91--102},
  publisher = {Springer},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-54525-2_8},
  abstract = {The popularity and widespread adoption of cloud computing has resulted in extensified and intensive use of virtualization technology. Virtualization technology allows the sharing of the same physical resources among several users. This enables the consolidation of servers and a multitude of user machines into a very small set of physical servers, by replacing the physical machines with virtual machines, running on the same physical servers. Consequently, several users work on and store their data in the same physical platform. A software layer is used to enable the sharing of hardware between the different users. Understandably, this leads to apprehensions about the security of their data and working environment for the users, as these are situated only one software layer apart from those belonging to the other users. Centralized storage and centralized computing thus naturally raise the question of security of user’s data, and motivate studies on how data security could possibly be compromised. This article surveys the security concerns in virtualization technology. It includes a study of different attacks in the context of virtualization, and logically organizes them in different categories. Where available, the patches to the attacks are also included in the survey. A special focus of the survey is on hardware limitations to support virtualization, and the conclusion drawn is that hardware limitations of different types are the root cause of most of the security issues.},
  isbn = {978-3-642-54525-2},
  langid = {english},
  keywords = {Virtual Machines,Virtualization Security,Virtualization technology},
  file = {/Users/oli/Zotero/storage/GA6B4LJ2/Jithin and Chandran - 2014 - Virtual Machine Isolation.pdf}
}

@article{jonasCloudProgrammingSimplified2019,
  title = {Cloud {{Programming Simplified}}: {{A Berkeley View}} on {{Serverless Computing}}},
  author = {Jonas, Eric and Schleier-Smith, Johann and Sreekanti, Vikram and Tsai, Chia-che and Khandelwal, Anurag and Pu, Qifan and Shankar, Vaishaal and Carreira, João and Krauth, Karl and Yadwadkar, Neeraja Jayant and Gonzalez, Joseph and Popa, Raluca A. and Stoica, Ion and Patterson, David A.},
  date = {2019},
  journaltitle = {ArXiv},
  volume = {abs/1902.03383},
  url = {https://api.semanticscholar.org/CorpusID:60440467}
}

@inproceedings{jonasOccupyCloudDistributed2017,
  title = {Occupy the Cloud: Distributed Computing for the 99\%},
  booktitle = {Proceedings of the 2017 {{Symposium}} on {{Cloud Computing}}},
  author = {Jonas, Eric and Pu, Qifan and Venkataraman, Shivaram and Stoica, Ion and Recht, Benjamin},
  date = {2017},
  series = {{{SoCC}} '17},
  pages = {445--451},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3127479.3128601},
  url = {https://doi.org/10.1145/3127479.3128601},
  abstract = {Distributed computing remains inaccessible to a large number of users, in spite of many open source platforms and extensive commercial offerings. While distributed computation frameworks have moved beyond a simple map-reduce model, many users are still left to struggle with complex cluster management and configuration tools, even for running simple embarrassingly parallel jobs. We argue that stateless functions represent a viable platform for these users, eliminating cluster management overhead, fulfilling the promise of elasticity. Furthermore, using our prototype implementation, PyWren, we show that this model is general enough to implement a number of distributed computing models, such as BSP, efficiently. Extrapolating from recent trends in network bandwidth and the advent of disaggregated storage, we suggest that stateless functions are a natural fit for data processing in future computing environments.},
  isbn = {978-1-4503-5028-0},
  venue = {Santa Clara, California},
  keywords = {AWS lambda,distributed computing,PyWren,serverless}
}

@online{KataContainersOpen,
  title = {Kata {{Containers}} - {{Open Source Container Runtime Software}}},
  url = {https://katacontainers.io/},
  urldate = {2024-06-04},
  abstract = {Kata Containers is an open source container runtime, building lightweight virtual machines that seamlessly plug into the containers ecosystem.},
  langid = {english},
  file = {/Users/oli/Zotero/storage/SGH53WCF/katacontainers.io.html}
}

@inproceedings{kotniFaastlaneAcceleratingFunctionasaService2021,
  title = {Faastlane: {{Accelerating Function-as-a-Service Workflows}}},
  booktitle = {2021 {{USENIX Annual Technical Conference}} ({{USENIX ATC}} 21)},
  author = {Kotni, Swaroop and Nayak, Ajay and Ganapathy, Vinod and Basu, Arkaprava},
  date = {2021-07},
  pages = {805--820},
  publisher = {USENIX Association},
  url = {https://www.usenix.org/conference/atc21/presentation/kotni},
  isbn = {978-1-939133-23-6}
}

@online{KVM,
  title = {{{KVM}}},
  url = {https://linux-kvm.org/page/Main_Page},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/XNPDHFR7/Main_Page.html}
}

@online{LambdaFunctionsCalling,
  title = {Lambda Functions Calling {{Lambda}} Functions - {{AWS Lambda}}},
  url = {https://docs.aws.amazon.com/lambda/latest/operatorguide/functions-calling-functions.html},
  urldate = {2024-06-06},
  file = {/Users/oli/Zotero/storage/XRRAPJ5Y/functions-calling-functions.html}
}

@online{LibuvCrossplatformAsynchronous,
  title = {Libuv — {{Cross-platform}} Asynchronous {{I}}/{{O}}},
  url = {https://libuv.org/},
  urldate = {2024-06-06},
  file = {/Users/oli/Zotero/storage/LCI8GMUV/libuv.org.html}
}

@inproceedings{linMeasurementStudyLinux2018,
  title = {A {{Measurement Study}} on {{Linux Container Security}}: {{Attacks}} and {{Countermeasures}}},
  shorttitle = {A {{Measurement Study}} on {{Linux Container Security}}},
  booktitle = {Proceedings of the 34th {{Annual Computer Security Applications Conference}}},
  author = {Lin, Xin and Lei, Lingguang and Wang, Yuewu and Jing, Jiwu and Sun, Kun and Zhou, Quan},
  date = {2018-12-03},
  pages = {418--429},
  publisher = {ACM},
  location = {San Juan PR USA},
  doi = {10.1145/3274694.3274720},
  url = {https://dl.acm.org/doi/10.1145/3274694.3274720},
  urldate = {2024-06-04},
  eventtitle = {{{ACSAC}} '18: 2018 {{Annual Computer Security Applications Conference}}},
  isbn = {978-1-4503-6569-7},
  langid = {english}
}

@online{liPagurusEliminatingCold2021,
  title = {Pagurus: {{Eliminating Cold Startup}} in {{Serverless Computing}} with {{Inter-Action Container Sharing}}},
  shorttitle = {Pagurus},
  author = {Li, Zijun and Chen, Quan and Guo, Minyi},
  date = {2021-08-25},
  eprint = {2108.11240},
  eprinttype = {arxiv},
  eprintclass = {cs},
  url = {http://arxiv.org/abs/2108.11240},
  urldate = {2024-06-04},
  abstract = {Serverless computing provides fine-grain resource sharing between Cloud tenants through containers. Each function invocation (action) runs in an individual container. When there is not an already started container for a user function, a new container has to be created for it. However, the long cold startup time of a container results in the long response latency of the action. Our investigation shows that the containers for some user actions share most of the software packages. If an action that requires a new container can “borrow” a similar warm container from other actions, the long cold startup can be eliminated. Based on the above finding, we propose Pagurus, a runtime container management system for eliminating the cold startup in serverless computing. Pagurus is comprised of an inter-action container scheduler and an intra-action container scheduler for each action. The inter-action container scheduler schedules shared containers among actions. The intra-action container scheduler deals with the management of the container lifecycle. Our experimental results show that Pagurus effectively eliminates the time-consuming container cold startup. An action may start to run in 10ms with Pagurus, even if there is not warm container for it.},
  langid = {english},
  pubstate = {preprint},
  keywords = {Computer Science - Distributed Parallel and Cluster Computing},
  file = {/Users/oli/Zotero/storage/H9VAYK4D/Li et al. - 2021 - Pagurus Eliminating Cold Startup in Serverless Co.pdf}
}

@online{LKMLDanielKiper,
  title = {{{LKML}}: {{Daniel Kiper}}: [{{PATCH}}] Xen/Balloon: {{Memory}} Hotplug Support for {{Xen}} Balloon Driver},
  url = {https://lkml.org/lkml/2011/3/28/108},
  urldate = {2024-06-06},
  file = {/Users/oli/Zotero/storage/VHNMIFBR/108.html}
}

@inproceedings{mahmoudiOptimizingServerlessComputing2019,
  title = {Optimizing Serverless Computing: Introducing an Adaptive Function Placement Algorithm},
  booktitle = {Proceedings of the 29th {{Annual International Conference}} on {{Computer Science}} and {{Software Engineering}}},
  author = {Mahmoudi, Nima and Lin, Changyuan and Khazaei, Hamzeh and Litoiu, Marin},
  date = {2019},
  series = {{{CASCON}} '19},
  pages = {203--213},
  publisher = {IBM Corp.},
  location = {USA},
  abstract = {The main concept behind serverless computing is to build and run applications without the need for server management. It refers to a fine-grained deployment model where applications, comprising of one or more functions, are uploaded to a platform and then executed, scaled, and billed in response to the exact demand needed at the moment. While elite cloud vendors such as Amazon, Google, Microsoft, and IBM are now providing serverless computing, their approach for the placement of functions, i.e. associated container or sandbox, on servers is oblivious to the workload which may lead to poor performance and/or higher operational cost for software owners. In this paper, using statistical machine learning, we design and evaluate an adaptive function placement algorithm which can be used by serverless computing platforms to optimize the performance of running functions while minimizing the operational cost. Given a fixed amount of resources, our smart spread function placement algorithm results in higher performance compared to existing approaches; this will be achieved by maintaining the users' desired quality of service for a longer time which prevents premature scaling of the cloud resources. Extensive experimental studies revealed that the proposed adaptive function placement algorithm can be easily adopted by serverless computing providers and integrated to container orchestration platforms without introducing any limiting side effects.},
  venue = {Toronto, Ontario, Canada},
  keywords = {container placement algorithms,machine learning,optimization,predictive performance modeling,serverless computing}
}

@inproceedings{mancoMyVMLighter2017,
  title = {My {{VM}} Is {{Lighter}} (and {{Safer}}) than Your {{Container}}},
  booktitle = {Proceedings of the 26th {{Symposium}} on {{Operating Systems Principles}}},
  author = {Manco, Filipe and Lupu, Costin and Schmidt, Florian and Mendes, Jose and Kuenzer, Simon and Sati, Sumit and Yasukata, Kenichi and Raiciu, Costin and Huici, Felipe},
  date = {2017-10-14},
  pages = {218--233},
  publisher = {ACM},
  location = {Shanghai China},
  doi = {10.1145/3132747.3132763},
  url = {https://dl.acm.org/doi/10.1145/3132747.3132763},
  urldate = {2024-06-04},
  eventtitle = {{{SOSP}} '17: {{ACM SIGOPS}} 26th {{Symposium}} on {{Operating Systems Principles}}},
  isbn = {978-1-4503-5085-3},
  langid = {english},
  file = {/Users/oli/Zotero/storage/3K4HBI5A/Manco et al. - 2017 - My VM is Lighter (and Safer) than your Container.pdf}
}

@inproceedings{menageAddingGenericProcess2010,
  title = {Adding {{Generic Process Containers}} to the {{Linux Kernel}}},
  author = {Menage, Paul},
  date = {2010},
  url = {https://api.semanticscholar.org/CorpusID:195183412}
}

@article{michaelMSWasmSoundlyEnforcing2023,
  title = {{{MSWasm}}: {{Soundly Enforcing Memory-Safe Execution}} of {{Unsafe Code}}},
  author = {Michael, Alexandra E. and Gollamudi, Anitha and Bosamiya, Jay and Johnson, Evan and Denlinger, Aidan and Disselkoen, Craig and Watt, Conrad and Parno, Bryan and Patrignani, Marco and Vassena, Marco and Stefan, Deian},
  date = {2023-01},
  journaltitle = {Proc. ACM Program. Lang.},
  volume = {7},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3571208},
  url = {https://doi.org/10.1145/3571208},
  abstract = {Most programs compiled to WebAssembly (Wasm) today are written in unsafe languages like C and C++. Unfortunately, memory-unsafe C code remains unsafe when compiled to Wasm—and attackers can exploit buffer overflows and use-after-frees in Wasm almost as easily as they can on native platforms. Memory- Safe WebAssembly (MSWasm) proposes to extend Wasm with language-level memory-safety abstractions to precisely address this problem. In this paper, we build on the original MSWasm position paper to realize this vision. We give a precise and formal semantics of MSWasm, and prove that well-typed MSWasm programs are, by construction, robustly memory safe. To this end, we develop a novel, language-independent memory-safety property based on colored memory locations and pointers. This property also lets us reason about the security guarantees of a formal C-to-MSWasm compiler—and prove that it always produces memory-safe programs (and preserves the semantics of safe programs). We use these formal results to then guide several implementations: Two compilers of MSWasm to native code, and a C-to-MSWasm compiler (that extends Clang). Our MSWasm compilers support different enforcement mechanisms, allowing developers to make security-performance trade-offs according to their needs. Our evaluation shows that on the PolyBenchC suite, the overhead of enforcing memory safety in software ranges from 22\% (enforcing spatial safety alone) to 198\% (enforcing full memory safety), and 51.7\% when using hardware memory capabilities for spatial safety and pointer integrity. More importantly, MSWasm’s design makes it easy to swap between enforcement mechanisms; as fast (especially hardware-based) enforcement techniques become available, MSWasm will be able to take advantage of these advances almost for free.},
  issue = {POPL},
  keywords = {Memory-safety,Secure Compilation,Semantics,WebAssembly}
}

@online{moniruzzamanAnalysisMemoryBallooning2014,
  title = {Analysis of {{Memory Ballooning Technique}} for {{Dynamic Memory Management}} of {{Virtual Machines}} ({{VMs}})},
  author = {Moniruzzaman, A. B. M.},
  date = {2014-11-26},
  eprint = {1411.7344},
  eprinttype = {arxiv},
  eprintclass = {cs},
  doi = {10.48550/arXiv.1411.7344},
  url = {http://arxiv.org/abs/1411.7344},
  urldate = {2024-06-06},
  abstract = {Memory ballooning is dynamic memory management technique for virtual machines (VMs). Ballooning is a part of memory reclamation technique operations used by a hypervisor to allow the physical host system to retrieve unused memory from certain guest virtual machines (VMs) and share it with others. Memory ballooning allows the total amount ofRAM required by guest VMs to exceed the amount ofphysical RAM available on the host. Memory overcommitment enables a higher consolidation ratio in a hypervisor. Using memory overcommitment, users can consolidate VMs on a physical machine such that physical resources are utilized in an optimal manner while delivering good performance. Hence memory reclamation is an integral component ofmemory overcommitment. In this paper, we address that the basic cause of memory that ballooning is memory overcommitment from using memory-intensive virtual machines. We compared to others reclamation technique and identify Cost Associate with Memory Ballooning in state of Memory Overcommitment. The objective of this paper is to analyse memory ballooning technique for dynamic memory management of VMs. For this analysis, VMware based virtualization software e.g ESXi Server, vCenter Server, vSphere Client are installed and configured on the Centre for Innovation and Technology (CIT) Lab, DIU; for monitor and analyze VM performance for memory ballooning technique. The performance ofmemory ballooning technique is evaluated with two different test cases. The purpose is to help users understand, how this technique impact the performance. Finally, we presents the throughput ofheavy workload with different memory limits when using ballooning or swapping; and analyse VM performance issue for this technique.},
  pubstate = {preprint},
  keywords = {Computer Science - Distributed Parallel and Cluster Computing},
  file = {/Users/oli/Zotero/storage/FIHFSFT4/Moniruzzaman - 2014 - Analysis of Memory Ballooning Technique for Dynami.pdf;/Users/oli/Zotero/storage/LFGGP2X8/1411.html}
}

@online{mozillaSpiderMonkeyJavaScriptWebAssembly2024,
  title = {{{SpiderMonkey JavaScript}}/{{WebAssembly Engine}}},
  author = {{Mozilla}},
  date = {2024},
  url = {https://spidermonkey.dev/}
}

@inproceedings{mvondoOFCOpportunisticCaching2021,
  title = {{{OFC}}: An Opportunistic Caching System for {{FaaS}} Platforms},
  booktitle = {Proceedings of the {{Sixteenth European Conference}} on {{Computer Systems}}},
  author = {Mvondo, Djob and Bacou, Mathieu and Nguetchouang, Kevin and Ngale, Lucien and Pouget, Stéphane and Kouam, Josiane and Lachaize, Renaud and Hwang, Jinho and Wood, Tim and Hagimont, Daniel and De Palma, Noël and Batchakui, Bernabé and Tchana, Alain},
  date = {2021},
  series = {{{EuroSys}} '21},
  pages = {228--244},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3447786.3456239},
  url = {https://doi.org/10.1145/3447786.3456239},
  abstract = {Cloud applications based on the "Functions as a Service" (FaaS) paradigm have become very popular. Yet, due to their stateless nature, they must frequently interact with an external data store, which limits their performance. To mitigate this issue, we introduce OFC, a transparent, vertically and horizontally elastic in-memory caching system for FaaS platforms, distributed over the worker nodes. OFC provides these benefits cost-effectively by exploiting two common sources of resource waste: (i) most cloud tenants overprovision the memory resources reserved for their functions because their footprint is non-trivially input-dependent and (ii) FaaS providers keep function sandboxes alive for several minutes to avoid cold starts. Using machine learning models adjusted for typical function input data categories (e.g., multimedia formats), OFC estimates the actual memory resources required by each function invocation and hoards the remaining capacity to feed the cache. We build our OFC prototype based on enhancements to the OpenWhisk FaaS platform, the Swift persistent object store, and the RAM-Cloud in-memory store. Using a diverse set of workloads, we show that OFC improves by up to 82 \% and 60 \% respectively the execution time of single-stage and pipelined functions.},
  isbn = {978-1-4503-8334-9},
  venue = {Online Event, United Kingdom},
  keywords = {cache,cloud computing,functions as a service (FaaS),latency,serverless}
}

@online{NamespacesLinuxManual,
  title = {Namespaces(7) - {{Linux}} Manual Page},
  url = {https://man7.org/linux/man-pages/man7/namespaces.7.html},
  urldate = {2024-06-06}
}

@inproceedings{narayanSwivelHardeningWebAssembly2021,
  title = {Swivel: {{Hardening}} \{\vphantom\}{{WebAssembly}}\vphantom\{\} against {{Spectre}}},
  shorttitle = {Swivel},
  author = {Narayan, Shravan and Disselkoen, Craig and Moghimi, Daniel and Cauligi, Sunjay and Johnson, Evan and Gang, Zhao and Vahldiek-Oberwagner, Anjo and Sahita, Ravi and Shacham, Hovav and Tullsen, Dean and Stefan, Deian},
  date = {2021},
  pages = {1433--1450},
  url = {https://www.usenix.org/conference/usenixsecurity21/presentation/narayan},
  urldate = {2024-06-04},
  eventtitle = {30th {{USENIX Security Symposium}} ({{USENIX Security}} 21)},
  isbn = {978-1-939133-24-3},
  langid = {english},
  file = {/Users/oli/Zotero/storage/W2E89RTK/Narayan et al. - 2021 - Swivel Hardening WebAssembly against Spectre.pdf}
}

@inproceedings{ngoEvaluatingScalabilityElasticity2022,
  title = {Evaluating the {{Scalability}} and {{Elasticity}} of {{Function}} as a {{Service Platform}}},
  booktitle = {Proceedings of the 2022 {{ACM}}/{{SPEC}} on {{International Conference}} on {{Performance Engineering}}},
  author = {Ngo, Kim Long and Mukherjee, Joydeep and Jiang, Zhen Ming and Litoiu, Marin},
  date = {2022-04-09},
  pages = {117--124},
  publisher = {ACM},
  location = {Beijing China},
  doi = {10.1145/3489525.3511682},
  url = {https://dl.acm.org/doi/10.1145/3489525.3511682},
  urldate = {2024-06-05},
  eventtitle = {{{ICPE}} '22: {{ACM}}/{{SPEC International Conference}} on {{Performance Engineering}}},
  isbn = {978-1-4503-9143-6},
  langid = {english}
}

@inproceedings{oakesSOCKRapidTask2018,
  title = {{{SOCK}}: {{Rapid Task Provisioning}} with {{Serverless-Optimized Containers}}},
  booktitle = {2018 {{USENIX Annual Technical Conference}} ({{USENIX ATC}} 18)},
  author = {Oakes, Edward and Yang, Leon and Zhou, Dennis and Houck, Kevin and Harter, Tyler and Arpaci-Dusseau, Andrea and Arpaci-Dusseau, Remzi},
  date = {2018-07},
  pages = {57--70},
  publisher = {USENIX Association},
  location = {Boston, MA},
  url = {https://www.usenix.org/conference/atc18/presentation/oakes},
  isbn = {978-1-931971-44-7}
}

@inproceedings{oliverstenbomRefunctionEliminatingServerless2019,
  title = {Refunction: {{Eliminating Serverless Cold Starts Through Container Reuse}}},
  author = {Oliver Stenbom, Robert Chatley},
  date = {2019},
  url = {https://www.imperial.ac.uk/media/imperial-college/faculty-of-engineering/computing/public/1819-ug-projects/StenbomO-Refunction-Eliminating-Serverless-Cold-Starts-Through-Container-Reuse.pdf}
}

@software{OpencontainersRunc2024,
  title = {Opencontainers/Runc},
  date = {2024-06-06T09:10:19Z},
  origdate = {2015-06-05T23:30:45Z},
  url = {https://github.com/opencontainers/runc},
  urldate = {2024-06-06},
  abstract = {CLI tool for spawning and running containers according to the OCI specification},
  organization = {Open Container Initiative},
  keywords = {containers,docker,oci}
}

@online{OptimizingLambdasReducing,
  title = {Optimizing Lambdas - Reducing Your Bills - {{Serverless Framework}} - {{Serverless Forums}}},
  url = {https://forum.serverless.com/t/optimizing-lambdas-reducing-your-bills/4101},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/L5T3JCDK/4101.html}
}

@inproceedings{patilServerlessComputingEmergence2021,
  title = {Serverless {{Computing}} and the {{Emergence}} of {{Function-as-a-Service}}},
  booktitle = {2021 {{International Conference}} on {{Recent Trends}} on {{Electronics}}, {{Information}}, {{Communication}} \& {{Technology}} ({{RTEICT}})},
  author = {Patil, Rishabh and Chaudhery, Tanveesh Singh and Qureshi, Muhammad Ali and Sawant, Vinaya and Dalvi, Harshal},
  date = {2021-08-27},
  pages = {764--769},
  publisher = {IEEE},
  location = {Bangalore, India},
  doi = {10.1109/RTEICT52294.2021.9573962},
  url = {https://ieeexplore.ieee.org/document/9573962/},
  urldate = {2024-06-04},
  eventtitle = {2021 {{International Conference}} on {{Recent Trends}} on {{Electronics}}, {{Information}}, {{Communication}} \& {{Technology}} ({{RTEICT}})},
  isbn = {978-1-66543-559-8}
}

@article{potdarPerformanceEvaluationDocker2020,
  title = {Performance {{Evaluation}} of {{Docker Container}} and {{Virtual Machine}}},
  author = {Potdar, Amit M and D g, Narayan and Kengond, Shivaraj and Mulla, Mohammed Moin},
  date = {2020-01-01},
  journaltitle = {Procedia Computer Science},
  shortjournal = {Procedia Computer Science},
  series = {Third {{International Conference}} on {{Computing}} and {{Network Communications}} ({{CoCoNet}}'19)},
  volume = {171},
  pages = {1419--1428},
  issn = {1877-0509},
  doi = {10.1016/j.procs.2020.04.152},
  url = {https://www.sciencedirect.com/science/article/pii/S1877050920311315},
  urldate = {2024-06-06},
  abstract = {Server virtualization is a technological innovation broadly used in IT enterprises. Virtualization provides a platform to run different services of operating systems on the cloud. It facilitates to build multiple virtual machines on a single basic physical machine either in the form of hypervisors or containers. To host many microservice applications, the emergent technology has introduced a model which consists of different operations performed by smaller individual deployed services. Thus, the demand for low-overhead virtualization technique is rapidly developing. There are many lightweight virtualization technologies; docker is one among them, which is an open-source platform. This technology allows developers and system admins to build, create, and run applications using docker engine. This paper provides the performance evaluation of Docker containers and virtual machines using standard benchmark tools such as Sysbench, Phoronix, and Apache benchmark, which include CPU performance, Memory throughput, Storage read/write performance, load test, and operation speed measurement.},
  keywords = {Benchmark tools,Docker Container,Virtual Machine,Virtualization},
  file = {/Users/oli/Zotero/storage/LRQZUAY5/S1877050920311315.html}
}

@online{PricingCloudFunctions,
  title = {Pricing | {{Cloud Functions}}},
  url = {https://cloud.google.com/functions/pricing},
  urldate = {2024-06-05},
  abstract = {Review pricing information for Cloud Functions},
  langid = {english},
  organization = {Google Cloud},
  file = {/Users/oli/Zotero/storage/4LYHFFSQ/pricing.html}
}

@online{PricingCloudRun,
  title = {Pricing | {{Cloud Run}}},
  url = {https://cloud.google.com/run/pricing},
  urldate = {2024-06-06},
  abstract = {Review pricing for Cloud Run},
  langid = {english},
  organization = {Google Cloud},
  file = {/Users/oli/Zotero/storage/L59X9XIZ/pricing.html}
}

@online{PricingFunctionsMicrosoft,
  title = {Pricing - {{Functions}} | {{Microsoft Azure}}},
  url = {https://azure.microsoft.com/en-gb/pricing/details/functions/},
  urldate = {2024-06-05},
  abstract = {Azure Functions provide a server-less development experience supporting a robust set of event triggers and data bindings.},
  langid = {english},
  file = {/Users/oli/Zotero/storage/9DSRNVGL/functions.html}
}

@online{QEMU,
  title = {{{QEMU}}},
  url = {https://www.qemu.org/},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/VHWQTJNN/www.qemu.org.html}
}

@thesis{ramosjoaocarloscarvalhodossantosSecurityChallengesVirtualization2009,
  title = {Security Challenges with Virtualization},
  author = {{Ramos, João Carlos Carvalho dos Santos}},
  date = {2009}
}

@inproceedings{razaviPrebakedUVMsScalable2015,
  title = {Prebaked {{µVMs}}: {{Scalable}}, {{Instant VM Startup}} for {{IaaS Clouds}}},
  shorttitle = {Prebaked {{µVMs}}},
  booktitle = {2015 {{IEEE}} 35th {{International Conference}} on {{Distributed Computing Systems}}},
  author = {Razavi, Kaveh and Van Der Kolk, Gerrit and Kielmann, Thilo},
  date = {2015-06},
  pages = {245--255},
  publisher = {IEEE},
  location = {Columbus, OH},
  doi = {10.1109/ICDCS.2015.33},
  url = {https://ieeexplore.ieee.org/document/7164911/},
  urldate = {2024-06-04},
  eventtitle = {2015 {{IEEE}} 35th {{International Conference}} on {{Distributed Computing Systems}} ({{ICDCS}})},
  isbn = {978-1-4673-7214-5}
}

@article{reubenSurveyVirtualMachine,
  title = {A {{Survey}} on {{Virtual Machine Security}}},
  author = {Reuben, Jenni Susan},
  abstract = {Virtualization plays a major role in helping the organizations to reduce the operational cost, and still ensuring improved efficiency, better utilization and flexibility of existing hardware. "Virtualization is both an opportunity and a threat says Patrick Lin, Senior director of Product Management for VMware" [4]. This paper presents a literature study on various security issues in virtualization technologies. Our study focus mainly on some open security vulnerabilities that virtualization brings to the environment. We concentrate on security issues that are unique for virtual machines. The security threats presented here are common to all the virtualization technologies available in the market, they are not specific to a single virtualization technology. We provide an overview of various virtualization technologies available in the market at the first place together with some security benefits that comes together with virtualization. Finally we provide a detailed discussion of several security holes in the virtualized environment.},
  langid = {english},
  file = {/Users/oli/Zotero/storage/47MTQDVI/Reuben - A Survey on Virtual Machine Security.pdf}
}

@online{robeceOverviewAzureEvent2024,
  title = {Overview - {{Azure Event Grid}}},
  author = {{robece}},
  date = {2024-05-21},
  url = {https://learn.microsoft.com/en-us/azure/event-grid/overview},
  urldate = {2024-06-04},
  abstract = {Learn about Event Grid's http and MQTT messaging capabilities.},
  langid = {american},
  file = {/Users/oli/Zotero/storage/XG7JCGWG/overview.html}
}

@article{rosenramiNamespacesCgroupsBasis2016,
  title = {Namespaces and Cgroups, the Basis of {{Linux}} Containers},
  author = {{Rosen, Rami}},
  date = {2016},
  journaltitle = {Seville, Spain, Feb}
}

@article{rouderHierarchicalModelEstimating2005,
  title = {A Hierarchical Model for Estimating Response Time Distributions},
  author = {Rouder, Jeffrey N. and Lu, Jun and Speckman, Paul and Sun, DongChu and Jiang, Yi},
  date = {2005-04},
  journaltitle = {Psychonomic Bulletin \& Review},
  shortjournal = {Psychonomic Bulletin \& Review},
  volume = {12},
  number = {2},
  pages = {195--223},
  issn = {1069-9384, 1531-5320},
  doi = {10.3758/BF03257252},
  url = {http://link.springer.com/10.3758/BF03257252},
  urldate = {2024-06-13},
  langid = {english},
  file = {/Users/oli/Zotero/storage/GAWBAYPZ/Rouder et al. - 2005 - A hierarchical model for estimating response time .pdf}
}

@online{RustbasedPlatformWeb,
  title = {Rust-Based Platform for the {{Web}} – {{SWC}}},
  url = {https://swc.rs/},
  urldate = {2024-06-14},
  abstract = {SWC is an extensible Rust-based platform for the next generation of fast developer tools. It's used by tools like Next.js, Parcel, and Deno, as well as companies like Vercel, ByteDance, Tencent, Shopify, and more.},
  langid = {english},
  file = {/Users/oli/Zotero/storage/PDFIN5WW/swc.rs.html}
}

@inproceedings{sabbioniSharedMemoryApproach2021,
  title = {A {{Shared Memory Approach}} for {{Function Chaining}} in {{Serverless Platforms}}},
  booktitle = {2021 {{IEEE Symposium}} on {{Computers}} and {{Communications}} ({{ISCC}})},
  author = {Sabbioni, Andrea and Rosa, Lorenzo and Bujari, Armir and Foschini, Luca and Corradi, Antonio},
  date = {2021},
  pages = {1--6},
  doi = {10.1109/ISCC53001.2021.9631385}
}

@inproceedings{sampeServerlessDataAnalytics2018,
  title = {Serverless {{Data Analytics}} in the {{IBM Cloud}}},
  booktitle = {Proceedings of the 19th {{International Middleware Conference Industry}}},
  author = {Sampé, Josep and Vernik, Gil and Sánchez-Artigas, Marc and García-López, Pedro},
  date = {2018},
  series = {Middleware '18},
  pages = {1--8},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3284028.3284029},
  url = {https://doi.org/10.1145/3284028.3284029},
  abstract = {Unexpectedly, the rise of serverless computing has also collaterally started the "democratization" of massive-scale data parallelism. This new trend heralded by PyWren pursues to enable untrained users to execute single-machine code in the cloud at massive scale through platforms like AWS Lambda. Inspired by this vision, this industry paper presents IBM-PyWren, which continues the pioneering work begun by PyWren in this field. It must be noted that IBM-PyWren is not, however, just a mere reimplementation of PyWren's API atop IBM Cloud Functions. Rather, it is must be viewed as an advanced extension of PyWren to run broader MapReduce jobs. We describe the design, innovative features (API extensions, data discovering \& partitioning, composability, etc.) and performance of IBM-PyWren, along with the challenges encountered during its implementation.},
  isbn = {978-1-4503-6016-6},
  venue = {Rennes, France},
  keywords = {Distributed computing,IBM Cloud Functions,IBM Cloud Object Storage,PyWren,Serverless computing}
}

@inproceedings{schwarzlRobustScalableProcess2022,
  title = {Robust and~{{Scalable Process Isolation Against Spectre}} in~the~{{Cloud}}},
  booktitle = {Computer {{Security}} – {{ESORICS}} 2022},
  author = {Schwarzl, Martin and Borrello, Pietro and Kogler, Andreas and Varda, Kenton and Schuster, Thomas and Schwarz, Michael and Gruss, Daniel},
  editor = {Atluri, Vijayalakshmi and Di Pietro, Roberto and Jensen, Christian D. and Meng, Weizhi},
  date = {2022},
  pages = {167--186},
  publisher = {Springer Nature Switzerland},
  location = {Cham},
  doi = {10.1007/978-3-031-17146-8_9},
  abstract = {In the quest for efficiency and performance, edge-computing providers replace process isolation with sandboxes, to support a high number of tenants per machine. While secure against software vulnerabilities, microarchitectural attacks can bypass these sandboxes.},
  isbn = {978-3-031-17146-8},
  langid = {english},
  file = {/Users/oli/Zotero/storage/2AT8FTCU/Schwarzl et al. - 2022 - Robust and Scalable Process Isolation Against Spec.pdf}
}

@software{SecurefoundationsVWasm2024,
  title = {Secure-Foundations/{{vWasm}}},
  date = {2024-05-30T16:57:59Z},
  origdate = {2022-02-15T00:11:26Z},
  url = {https://github.com/secure-foundations/vWasm},
  urldate = {2024-06-04},
  abstract = {A formally-verified provably-safe sandboxing Wasm-to-native compiler},
  organization = {Secure Foundations Lab}
}

@online{SecurityWasmtime,
  title = {Security - {{Wasmtime}}},
  url = {https://docs.wasmtime.dev/security.html},
  urldate = {2024-06-06},
  file = {/Users/oli/Zotero/storage/3F72GYCT/security.html}
}

@online{SecurityWebAssembly,
  title = {Security - {{WebAssembly}}},
  url = {https://webassembly.org/docs/security/},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/QMMIZE5U/security.html}
}

@inproceedings{sedefogluCostMinimizationDeploying2021,
  title = {Cost Minimization for Deploying Serverless Functions},
  booktitle = {Proceedings of the 36th {{Annual ACM Symposium}} on {{Applied Computing}}},
  author = {Sedefoğlu, Özgür and Sözer, Hasan},
  date = {2021},
  series = {{{SAC}} '21},
  pages = {83--85},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3412841.3442069},
  url = {https://doi.org/10.1145/3412841.3442069},
  abstract = {The costs of serverless functions increase proportional to the amount of memory reserved on the deployed server. However, increasing the amount of memory decreases the function execution time, which is also a factor that contributes to cost. We propose an automated approach for optimizing the amount of memory reserved for serverless functions. First, we measure the running time of a given function in various memory settings and derive a regression model. Then, we define an objective function and a set of constraints based on this regression model and the configuration space. Finally, we determine the optimal memory setting for minimizing cost. Our industrial case study shows that significant cost reductions can be achieved by accurate estimations of the impact of memory settings on runtime performance.},
  isbn = {978-1-4503-8104-8},
  venue = {Virtual Event, Republic of Korea},
  keywords = {cloud computing,cost minimization,function as a service,industrial case study,serverless computing}
}

@incollection{sehgalCostBillingPractices2023,
  title = {Cost and {{Billing Practices}} in {{Cloud}}},
  booktitle = {Cloud {{Computing}} with {{Security}} and {{Scalability}}.: {{Concepts}} and {{Practices}}},
  author = {Sehgal, Naresh Kumar and Bhatt, Pramod Chandra P. and Acken, John M.},
  editor = {Sehgal, Naresh Kumar and Bhatt, Pramod Chandra P. and Acken, John M.},
  date = {2023},
  pages = {177--195},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-031-07242-0_10},
  url = {https://doi.org/10.1007/978-3-031-07242-0_10},
  urldate = {2024-06-04},
  abstract = {The usage of Cloud is through a service provider, wherein the two primary stakeholders are the consumers and provider of the service. However, unlike utilities such as electricity, water, postal, or city services, the Cloud Computing services offer opportunities for many interesting and innovative provisions, which we shall discuss later in this chapter. In this section, we compare and contrast some facets of billing in traditional utility services vs. Cloud Computing.},
  isbn = {978-3-031-07242-0},
  langid = {english},
  keywords = {Auto scaling,Billing,Cloud computing,Cost,Forecasting,Load balancing,Service,SLA},
  file = {/Users/oli/Zotero/storage/RZCXBVU6/Sehgal et al. - 2023 - Cost and Billing Practices in Cloud.pdf}
}

@online{ServerlessComputingAWS,
  title = {Serverless {{Computing}} – {{AWS Lambda Pricing}} – {{Amazon Web Services}}},
  url = {https://aws.amazon.com/lambda/pricing/},
  urldate = {2024-06-05},
  abstract = {With AWS Lambda, you pay only for what you use. You are charged based on the number of requests for your functions and the time your code executes.},
  langid = {american},
  organization = {Amazon Web Services, Inc.},
  file = {/Users/oli/Zotero/storage/LUJUE83C/pricing.html}
}

@online{serverlessServerlessZeroFrictionServerless2024,
  title = {Serverless: {{Zero-Friction Serverless Apps On AWS Lambda}} \& {{Beyond}}},
  author = {Serverless, Inc},
  date = {2024},
  url = {https://www.serverless.com/}
}

@inproceedings{shillakerFaasmLightweightIsolation2020,
  title = {Faasm: {{Lightweight Isolation}} for {{Efficient Stateful Serverless Computing}}},
  booktitle = {2020 {{USENIX Annual Technical Conference}} ({{USENIX ATC}} 20)},
  author = {Shillaker, Simon and Pietzuch, Peter},
  date = {2020-07},
  pages = {419--433},
  publisher = {USENIX Association},
  url = {https://www.usenix.org/conference/atc20/presentation/shillaker},
  isbn = {978-1-939133-14-4}
}

@article{sreekantiCloudburstStatefulFunctionsasaService2020,
  title = {Cloudburst: {{Stateful Functions-as-a-Service}}},
  author = {Sreekanti, Vikram and Wu, Chenggang and Lin, Xiayue Charles and Schleier-Smith, Johann and Faleiro, Jose M. and Gonzalez, Joseph E. and Hellerstein, Joseph M. and Tumanov, Alexey},
  date = {2020},
  journaltitle = {CoRR},
  volume = {abs/2001.04592},
  eprint = {2001.04592},
  eprinttype = {arxiv},
  url = {https://arxiv.org/abs/2001.04592}
}

@online{StateServerlessDatadog,
  title = {The {{State}} of {{Serverless}} | {{Datadog}}},
  url = {https://www.datadoghq.com/state-of-serverless/},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/FL725GWV/state-of-serverless.html}
}

@online{sumnerBun2024,
  title = {Bun},
  author = {Sumner, Jared},
  date = {2024},
  url = {https://bun.sh/}
}

@inproceedings{sunSecurityNamespaceMaking2018,
  title = {Security {{Namespace}}: {{Making Linux Security Frameworks Available}} to {{Containers}}},
  shorttitle = {Security {{Namespace}}},
  author = {Sun, Yuqiong and Safford, David and Zohar, Mimi and Pendarakis, Dimitrios and Gu, Zhongshu and Jaeger, Trent},
  date = {2018},
  pages = {1423--1439},
  url = {https://www.usenix.org/conference/usenixsecurity18/presentation/sun},
  urldate = {2024-06-06},
  eventtitle = {27th {{USENIX Security Symposium}} ({{USENIX Security}} 18)},
  isbn = {978-1-939133-04-5},
  langid = {english},
  file = {/Users/oli/Zotero/storage/QFZBIZYR/Sun et al. - 2018 - Security Namespace Making Linux Security Framewor.pdf}
}

@article{sussmanSCHEMEInterpreterExtended1975,
  title = {{{SCHEME}}: {{An Interpreter}} for {{Extended Lambda Calculus}}},
  shorttitle = {{{SCHEME}}},
  author = {Sussman, Gerald J. and Steele, Guy L.},
  date = {1975-12-01},
  url = {https://dspace.mit.edu/handle/1721.1/5794},
  urldate = {2024-06-04},
  abstract = {Inspired by ACTORS [Greif and Hewitt] [Smith and Hewitt], we have implemented an interpreter for a LISP-like language, SCHEME, based on the lambda calculus [Church], but extended for side effects, multiprocessing, and process synchronization. The purpose of this implementation is tutorial. We wish to: (1) alleviate the confusion caused by Micro-PLANNER, CONNIVER, etc. by clarifying the embedding of non-recursive control structures in a recursive host language like LISP. (2) explain how to use these control structures, independent of such issues as pattern matching and data base manipulation. (3) have a simple concrete experimental domain for certain issues of programming semantics and style.},
  langid = {american},
  annotation = {Accepted: 2004-10-01T20:37:06Z},
  file = {/Users/oli/Zotero/storage/5ZU5V6UU/Sussman and Steele - 1975 - SCHEME An Interpreter for Extended Lambda Calculu.pdf}
}

@online{TokioAsynchronousRust,
  title = {Tokio - {{An}} Asynchronous {{Rust}} Runtime},
  url = {https://tokio.rs/},
  urldate = {2024-06-06},
  file = {/Users/oli/Zotero/storage/STIAJEMA/tokio.rs.html}
}

@article{vanoCloudNativeWorkloadOrchestration2023,
  title = {Cloud-{{Native Workload Orchestration}} at the {{Edge}}: {{A Deployment Review}} and {{Future Directions}}},
  shorttitle = {Cloud-{{Native Workload Orchestration}} at the {{Edge}}},
  author = {Vaño, Rafael and Lacalle, Ignacio and Sowiński, Piotr and S-Julián, Raúl and Palau, Carlos E.},
  date = {2023-02-16},
  journaltitle = {Sensors (Basel, Switzerland)},
  shortjournal = {Sensors (Basel)},
  volume = {23},
  number = {4},
  eprint = {36850813},
  eprinttype = {pmid},
  pages = {2215},
  issn = {1424-8220},
  doi = {10.3390/s23042215},
  url = {https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9967903/},
  urldate = {2024-06-06},
  abstract = {Cloud-native computing principles such as virtualization and orchestration are key to transferring to the promising paradigm of edge computing. Challenges of containerization, operative models and scarce availability of established tools make a thorough review indispensable. Therefore, the authors have described the practical methods and tools found in the literature as well as in current community-led development projects, and have thoroughly exposed the future directions of the field. Container virtualization and its orchestration through Kubernetes have dominated the cloud computing domain, while major efforts have been recently recorded focused on the adaptation of these technologies to the edge. Such initiatives have addressed either the reduction of container engines and the development of specific tailored operating systems or the development of smaller K8s distributions and edge-focused adaptations (such as KubeEdge). Finally, new workload virtualization approaches, such as WebAssembly modules together with the joint orchestration of these heterogeneous workloads, seem to be the topics to pay attention to in the short to medium term.},
  pmcid = {PMC9967903},
  file = {/Users/oli/Zotero/storage/G8I9QCE8/Vaño et al. - 2023 - Cloud-Native Workload Orchestration at the Edge A.pdf}
}

@unpublished{vassenaMemorySafetyPreservation2019,
  title = {Memory Safety Preservation for Webassembly},
  author = {Vassena, Marco and Patrignani, Marco},
  date = {2019},
  eprint = {1910.09586},
  eprinttype = {arxiv}
}

@book{wardleyWardleyMaps2022,
  title = {Wardley {{Maps}}},
  author = {Wardley, Simon},
  editor = {Mosior, Ben},
  date = {2022-06-17},
  publisher = {Independently published},
  abstract = {This is the story of my journey, from a bumbling and confused CEO lost in the headlights of change to having a vague idea of what I was doing. I say vague because I’m not going to make grand claims to the techniques that I discuss in this book. It is enough to say that I have found them useful over the last decade whether in finding opportunity, removing waste, helping to organise a team of people or determining the strategy for a company. Will they help you? That depends upon the context that you’re operating in but since the techniques don’t take long to learn then I’ll leave it up to the reader to discover whether they are helpful to them or not. Remember, all models are wrong but some are useful. -- Simon WardleyThis work (Wardley Maps for Print v0.2.1) is an adaption of Wardley Maps by Simon Wardley (as retrieved December 23, 2020), edited for print through careful modification of the text and layout. Priced as low as Amazon will allow.},
  isbn = {9798836808136},
  langid = {english},
  pagetotal = {626}
}

@online{Wasmtime,
  title = {Wasmtime},
  url = {https://wasmtime.dev/},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/FBM3EVU8/wasmtime.dev.html}
}

@online{WebAssembly,
  title = {{{WebAssembly}}},
  url = {https://webassembly.org/},
  urldate = {2024-06-04},
  file = {/Users/oli/Zotero/storage/69EJYWML/webassembly.org.html}
}

@online{WebAssemblyWasmCloudflare2024,
  title = {{{WebAssembly}} ({{Wasm}}) · {{Cloudflare Workers}} Docs},
  date = {2024-04-02},
  url = {https://developers.cloudflare.com/workers/runtime-apis/webassembly/},
  urldate = {2024-06-04},
  abstract = {Execute code written in a language other than JavaScript or write an entire Cloudflare Worker in Rust.},
  langid = {english},
  organization = {Cloudflare Docs},
  file = {/Users/oli/Zotero/storage/WFF8HG7H/webassembly.html}
}

@online{Webpack,
  title = {Webpack},
  url = {https://webpack.js.org/},
  urldate = {2024-06-14},
  abstract = {webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.},
  langid = {english},
  organization = {webpack},
  file = {/Users/oli/Zotero/storage/MR5AL49X/webpack.js.org.html}
}

@article{wenRisePlanetServerless2023,
  title = {Rise of the {{Planet}} of {{Serverless Computing}}: {{A Systematic Review}}},
  author = {Wen, Jinfeng and Chen, Zhenpeng and Jin, Xin and Liu, Xuanzhe},
  date = {2023-07},
  journaltitle = {ACM Trans. Softw. Eng. Methodol.},
  volume = {32},
  number = {5},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  issn = {1049-331X},
  doi = {10.1145/3579643},
  url = {https://doi.org/10.1145/3579643},
  abstract = {Serverless computing is an emerging cloud computing paradigm, being adopted to develop a wide range of software applications. It allows developers to focus on the application logic in the granularity of function, thereby freeing developers from tedious and error-prone infrastructure management. Meanwhile, its unique characteristic poses new challenges to the development and deployment of serverless-based applications. To tackle these challenges, enormous research efforts have been devoted. This article provides a comprehensive literature review to characterize the current research state of serverless computing. Specifically, this article covers 164 articles on 17 research directions of serverless computing, including performance optimization, programming framework, application migration, multi-cloud development, testing and debugging, and so on. It also derives research trends, focus, and commonly-used platforms for serverless computing, as well as promising research opportunities.},
  keywords = {literature view,Serverless computing}
}

@online{WhatContainerDocker,
  title = {What Is a {{Container}}? | {{Docker}}},
  shorttitle = {What Is a {{Container}}?},
  url = {https://www.docker.com/resources/what-container/},
  urldate = {2024-06-04},
  abstract = {A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.},
  langid = {american},
  file = {/Users/oli/Zotero/storage/D2URV2JQ/what-container.html}
}

@online{WhatContainerDockera,
  title = {What Is a {{Container}}? | {{Docker}}},
  shorttitle = {What Is a {{Container}}?},
  url = {https://www.docker.com/resources/what-container/},
  urldate = {2024-06-06},
  abstract = {A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.},
  langid = {american},
  file = {/Users/oli/Zotero/storage/FZMW5XP2/what-container.html}
}

@inproceedings{yadavDockerContainersVirtual2019,
  title = {Docker {{Containers Versus Virtual Machine-Based Virtualization}}},
  booktitle = {Emerging {{Technologies}} in {{Data Mining}} and {{Information Security}}},
  author = {Yadav, Anuj Kumar and Garg, M. L. and {Ritika}},
  editor = {Abraham, Ajith and Dutta, Paramartha and Mandal, Jyotsna Kumar and Bhattacharya, Abhishek and Dutta, Soumi},
  date = {2019},
  pages = {141--150},
  publisher = {Springer},
  location = {Singapore},
  doi = {10.1007/978-981-13-1501-5_12},
  abstract = {Cloud computing is a paradigm based on IT that enables ubiquitous access to large pools of configurable resources which can be shared (such as computer networks, servers, storage, applications, and services) and rapidly provisioned with least effort. Cloud computing implementation in traditional ways is done using virtual machines, but nowadays a new concept of Docker containers is also gaining popularity due to its features. Containerization in some cases is treated as lightweight virtualization technique. Virtualization is used by cloud computing environments and data centres to disassociate the tools and applications from the underlying hardware. To validate this, hardware virtualization and OS-level virtualization is used. Apart from virtualization, a new technique is, containers, gaining popularity and many cloud-based deployments are using this technique. In this paper, both of these technologies are compared such that end-user can use these according to the requirement to get benefitted.},
  isbn = {9789811315015},
  langid = {english},
  keywords = {Container,Docker engine,Hypervisor,VMs},
  file = {/Users/oli/Zotero/storage/WSQNL697/Yadav et al. - 2019 - Docker Containers Versus Virtual Machine-Based Vir.pdf}
}

@inproceedings{yuCharacterizingServerlessPlatforms2020,
  title = {Characterizing Serverless Platforms with Serverlessbench},
  booktitle = {Proceedings of the 11th {{ACM Symposium}} on {{Cloud Computing}}},
  author = {Yu, Tianyi and Liu, Qingyuan and Du, Dong and Xia, Yubin and Zang, Binyu and Lu, Ziqian and Yang, Pingchao and Qin, Chenggang and Chen, Haibo},
  date = {2020-10-12},
  pages = {30--44},
  publisher = {ACM},
  location = {Virtual Event USA},
  doi = {10.1145/3419111.3421280},
  url = {https://dl.acm.org/doi/10.1145/3419111.3421280},
  urldate = {2024-06-05},
  eventtitle = {{{SoCC}} '20: {{ACM Symposium}} on {{Cloud Computing}}},
  isbn = {978-1-4503-8137-6},
  langid = {english}
}
